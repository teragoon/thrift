//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./post_types');
//HELPER FUNCTIONS AND STRUCTURES

var PostService_store_args = function(args) {
  this.post = null;
  if (args) {
    if (args.post !== undefined) {
      this.post = args.post;
    }
  }
};
PostService_store_args.prototype = {};
PostService_store_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.post = new ttypes.Post();
        this.post.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_store_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_store_args');
  if (this.post) {
    output.writeFieldBegin('post', Thrift.Type.STRUCT, 1);
    this.post.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_store_result = function(args) {
};
PostService_store_result.prototype = {};
PostService_store_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_store_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_store_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPost_args = function(args) {
  this.postId = null;
  if (args) {
    if (args.postId !== undefined) {
      this.postId = args.postId;
    }
  }
};
PostService_getPost_args.prototype = {};
PostService_getPost_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.postId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPost_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPost_args');
  if (this.postId) {
    output.writeFieldBegin('postId', Thrift.Type.I32, 1);
    output.writeI32(this.postId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPost_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PostService_getPost_result.prototype = {};
PostService_getPost_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Post();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPost_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPost_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPostsBySnsId_args = function(args) {
  this.snsId = null;
  if (args) {
    if (args.snsId !== undefined) {
      this.snsId = args.snsId;
    }
  }
};
PostService_getPostsBySnsId_args.prototype = {};
PostService_getPostsBySnsId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.snsId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPostsBySnsId_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPostsBySnsId_args');
  if (this.snsId) {
    output.writeFieldBegin('snsId', Thrift.Type.I32, 1);
    output.writeI32(this.snsId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPostsBySnsId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PostService_getPostsBySnsId_result.prototype = {};
PostService_getPostsBySnsId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Post();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPostsBySnsId_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPostsBySnsId_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPostsAll_args = function(args) {
};
PostService_getPostsAll_args.prototype = {};
PostService_getPostsAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPostsAll_args.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPostsAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostService_getPostsAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
PostService_getPostsAll_result.prototype = {};
PostService_getPostsAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Post();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PostService_getPostsAll_result.prototype.write = function(output) {
  output.writeStructBegin('PostService_getPostsAll_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PostServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
PostServiceClient.prototype = {};
PostServiceClient.prototype.store = function(post, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_store(post);
};

PostServiceClient.prototype.send_store = function(post) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('store', Thrift.MessageType.CALL, this.seqid);
  var args = new PostService_store_args();
  args.post = post;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PostServiceClient.prototype.recv_store = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PostService_store_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
PostServiceClient.prototype.getPost = function(postId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPost(postId);
};

PostServiceClient.prototype.send_getPost = function(postId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPost', Thrift.MessageType.CALL, this.seqid);
  var args = new PostService_getPost_args();
  args.postId = postId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PostServiceClient.prototype.recv_getPost = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PostService_getPost_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPost failed: unknown result');
};
PostServiceClient.prototype.getPostsBySnsId = function(snsId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPostsBySnsId(snsId);
};

PostServiceClient.prototype.send_getPostsBySnsId = function(snsId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPostsBySnsId', Thrift.MessageType.CALL, this.seqid);
  var args = new PostService_getPostsBySnsId_args();
  args.snsId = snsId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PostServiceClient.prototype.recv_getPostsBySnsId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PostService_getPostsBySnsId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPostsBySnsId failed: unknown result');
};
PostServiceClient.prototype.getPostsAll = function(callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getPostsAll();
};

PostServiceClient.prototype.send_getPostsAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPostsAll', Thrift.MessageType.CALL, this.seqid);
  var args = new PostService_getPostsAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PostServiceClient.prototype.recv_getPostsAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PostService_getPostsAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPostsAll failed: unknown result');
};
var PostServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
PostServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

PostServiceProcessor.prototype.process_store = function(seqid, input, output) {
  var args = new PostService_store_args();
  args.read(input);
  input.readMessageEnd();
  var result = new PostService_store_result();
  this._handler.store(args.post, function (success) {
    result.success = success;
    output.writeMessageBegin("store", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

PostServiceProcessor.prototype.process_getPost = function(seqid, input, output) {
  var args = new PostService_getPost_args();
  args.read(input);
  input.readMessageEnd();
  var result = new PostService_getPost_result();
  this._handler.getPost(args.postId, function (success) {
    result.success = success;
    output.writeMessageBegin("getPost", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

PostServiceProcessor.prototype.process_getPostsBySnsId = function(seqid, input, output) {
  var args = new PostService_getPostsBySnsId_args();
  args.read(input);
  input.readMessageEnd();
  var result = new PostService_getPostsBySnsId_result();
  this._handler.getPostsBySnsId(args.snsId, function (success) {
    result.success = success;
    output.writeMessageBegin("getPostsBySnsId", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

PostServiceProcessor.prototype.process_getPostsAll = function(seqid, input, output) {
  var args = new PostService_getPostsAll_args();
  args.read(input);
  input.readMessageEnd();
  var result = new PostService_getPostsAll_result();
  this._handler.getPostsAll(function (success) {
    result.success = success;
    output.writeMessageBegin("getPostsAll", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

