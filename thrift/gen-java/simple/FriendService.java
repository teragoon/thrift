/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package simple;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FriendService {

  public interface Iface {

    public void setReqFri(Friend me, Friend friend) throws org.apache.thrift.TException;

    public void setRecFri(Friend me, Friend friend) throws org.apache.thrift.TException;

    public void setListFri(Friend me, Friend friend) throws org.apache.thrift.TException;

    public List<Friend> getReqFri(int uid) throws org.apache.thrift.TException;

    public List<Friend> getRecFri(int uid) throws org.apache.thrift.TException;

    public List<Friend> getListFri(int uid) throws org.apache.thrift.TException;

    public void delReqFri(Friend me, Friend friend) throws org.apache.thrift.TException;

    public void delRecFri(Friend me, Friend friend) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setReqFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setReqFri_call> resultHandler) throws org.apache.thrift.TException;

    public void setRecFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setRecFri_call> resultHandler) throws org.apache.thrift.TException;

    public void setListFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.setListFri_call> resultHandler) throws org.apache.thrift.TException;

    public void getReqFri(int uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getReqFri_call> resultHandler) throws org.apache.thrift.TException;

    public void getRecFri(int uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getRecFri_call> resultHandler) throws org.apache.thrift.TException;

    public void getListFri(int uid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getListFri_call> resultHandler) throws org.apache.thrift.TException;

    public void delReqFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delReqFri_call> resultHandler) throws org.apache.thrift.TException;

    public void delRecFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.delRecFri_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void setReqFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      send_setReqFri(me, friend);
      recv_setReqFri();
    }

    public void send_setReqFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      setReqFri_args args = new setReqFri_args();
      args.setMe(me);
      args.setFriend(friend);
      sendBase("setReqFri", args);
    }

    public void recv_setReqFri() throws org.apache.thrift.TException
    {
      setReqFri_result result = new setReqFri_result();
      receiveBase(result, "setReqFri");
      return;
    }

    public void setRecFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      send_setRecFri(me, friend);
      recv_setRecFri();
    }

    public void send_setRecFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      setRecFri_args args = new setRecFri_args();
      args.setMe(me);
      args.setFriend(friend);
      sendBase("setRecFri", args);
    }

    public void recv_setRecFri() throws org.apache.thrift.TException
    {
      setRecFri_result result = new setRecFri_result();
      receiveBase(result, "setRecFri");
      return;
    }

    public void setListFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      send_setListFri(me, friend);
      recv_setListFri();
    }

    public void send_setListFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      setListFri_args args = new setListFri_args();
      args.setMe(me);
      args.setFriend(friend);
      sendBase("setListFri", args);
    }

    public void recv_setListFri() throws org.apache.thrift.TException
    {
      setListFri_result result = new setListFri_result();
      receiveBase(result, "setListFri");
      return;
    }

    public List<Friend> getReqFri(int uid) throws org.apache.thrift.TException
    {
      send_getReqFri(uid);
      return recv_getReqFri();
    }

    public void send_getReqFri(int uid) throws org.apache.thrift.TException
    {
      getReqFri_args args = new getReqFri_args();
      args.setUid(uid);
      sendBase("getReqFri", args);
    }

    public List<Friend> recv_getReqFri() throws org.apache.thrift.TException
    {
      getReqFri_result result = new getReqFri_result();
      receiveBase(result, "getReqFri");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getReqFri failed: unknown result");
    }

    public List<Friend> getRecFri(int uid) throws org.apache.thrift.TException
    {
      send_getRecFri(uid);
      return recv_getRecFri();
    }

    public void send_getRecFri(int uid) throws org.apache.thrift.TException
    {
      getRecFri_args args = new getRecFri_args();
      args.setUid(uid);
      sendBase("getRecFri", args);
    }

    public List<Friend> recv_getRecFri() throws org.apache.thrift.TException
    {
      getRecFri_result result = new getRecFri_result();
      receiveBase(result, "getRecFri");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecFri failed: unknown result");
    }

    public List<Friend> getListFri(int uid) throws org.apache.thrift.TException
    {
      send_getListFri(uid);
      return recv_getListFri();
    }

    public void send_getListFri(int uid) throws org.apache.thrift.TException
    {
      getListFri_args args = new getListFri_args();
      args.setUid(uid);
      sendBase("getListFri", args);
    }

    public List<Friend> recv_getListFri() throws org.apache.thrift.TException
    {
      getListFri_result result = new getListFri_result();
      receiveBase(result, "getListFri");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListFri failed: unknown result");
    }

    public void delReqFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      send_delReqFri(me, friend);
      recv_delReqFri();
    }

    public void send_delReqFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      delReqFri_args args = new delReqFri_args();
      args.setMe(me);
      args.setFriend(friend);
      sendBase("delReqFri", args);
    }

    public void recv_delReqFri() throws org.apache.thrift.TException
    {
      delReqFri_result result = new delReqFri_result();
      receiveBase(result, "delReqFri");
      return;
    }

    public void delRecFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      send_delRecFri(me, friend);
      recv_delRecFri();
    }

    public void send_delRecFri(Friend me, Friend friend) throws org.apache.thrift.TException
    {
      delRecFri_args args = new delRecFri_args();
      args.setMe(me);
      args.setFriend(friend);
      sendBase("delRecFri", args);
    }

    public void recv_delRecFri() throws org.apache.thrift.TException
    {
      delRecFri_result result = new delRecFri_result();
      receiveBase(result, "delRecFri");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setReqFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setReqFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setReqFri_call method_call = new setReqFri_call(me, friend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setReqFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Friend me;
      private Friend friend;
      public setReqFri_call(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setReqFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
        this.friend = friend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setReqFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setReqFri_args args = new setReqFri_args();
        args.setMe(me);
        args.setFriend(friend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setReqFri();
      }
    }

    public void setRecFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setRecFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRecFri_call method_call = new setRecFri_call(me, friend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRecFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Friend me;
      private Friend friend;
      public setRecFri_call(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setRecFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
        this.friend = friend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRecFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRecFri_args args = new setRecFri_args();
        args.setMe(me);
        args.setFriend(friend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setRecFri();
      }
    }

    public void setListFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setListFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setListFri_call method_call = new setListFri_call(me, friend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setListFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Friend me;
      private Friend friend;
      public setListFri_call(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<setListFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
        this.friend = friend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setListFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setListFri_args args = new setListFri_args();
        args.setMe(me);
        args.setFriend(friend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setListFri();
      }
    }

    public void getReqFri(int uid, org.apache.thrift.async.AsyncMethodCallback<getReqFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getReqFri_call method_call = new getReqFri_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getReqFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      public getReqFri_call(int uid, org.apache.thrift.async.AsyncMethodCallback<getReqFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getReqFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getReqFri_args args = new getReqFri_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Friend> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getReqFri();
      }
    }

    public void getRecFri(int uid, org.apache.thrift.async.AsyncMethodCallback<getRecFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecFri_call method_call = new getRecFri_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      public getRecFri_call(int uid, org.apache.thrift.async.AsyncMethodCallback<getRecFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecFri_args args = new getRecFri_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Friend> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecFri();
      }
    }

    public void getListFri(int uid, org.apache.thrift.async.AsyncMethodCallback<getListFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListFri_call method_call = new getListFri_call(uid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int uid;
      public getListFri_call(int uid, org.apache.thrift.async.AsyncMethodCallback<getListFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListFri_args args = new getListFri_args();
        args.setUid(uid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Friend> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListFri();
      }
    }

    public void delReqFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<delReqFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delReqFri_call method_call = new delReqFri_call(me, friend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delReqFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Friend me;
      private Friend friend;
      public delReqFri_call(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<delReqFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
        this.friend = friend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delReqFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delReqFri_args args = new delReqFri_args();
        args.setMe(me);
        args.setFriend(friend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_delReqFri();
      }
    }

    public void delRecFri(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<delRecFri_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      delRecFri_call method_call = new delRecFri_call(me, friend, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class delRecFri_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Friend me;
      private Friend friend;
      public delRecFri_call(Friend me, Friend friend, org.apache.thrift.async.AsyncMethodCallback<delRecFri_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.me = me;
        this.friend = friend;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("delRecFri", org.apache.thrift.protocol.TMessageType.CALL, 0));
        delRecFri_args args = new delRecFri_args();
        args.setMe(me);
        args.setFriend(friend);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_delRecFri();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setReqFri", new setReqFri());
      processMap.put("setRecFri", new setRecFri());
      processMap.put("setListFri", new setListFri());
      processMap.put("getReqFri", new getReqFri());
      processMap.put("getRecFri", new getRecFri());
      processMap.put("getListFri", new getListFri());
      processMap.put("delReqFri", new delReqFri());
      processMap.put("delRecFri", new delRecFri());
      return processMap;
    }

    private static class setReqFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setReqFri_args> {
      public setReqFri() {
        super("setReqFri");
      }

      protected setReqFri_args getEmptyArgsInstance() {
        return new setReqFri_args();
      }

      protected setReqFri_result getResult(I iface, setReqFri_args args) throws org.apache.thrift.TException {
        setReqFri_result result = new setReqFri_result();
        iface.setReqFri(args.me, args.friend);
        return result;
      }
    }

    private static class setRecFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRecFri_args> {
      public setRecFri() {
        super("setRecFri");
      }

      protected setRecFri_args getEmptyArgsInstance() {
        return new setRecFri_args();
      }

      protected setRecFri_result getResult(I iface, setRecFri_args args) throws org.apache.thrift.TException {
        setRecFri_result result = new setRecFri_result();
        iface.setRecFri(args.me, args.friend);
        return result;
      }
    }

    private static class setListFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setListFri_args> {
      public setListFri() {
        super("setListFri");
      }

      protected setListFri_args getEmptyArgsInstance() {
        return new setListFri_args();
      }

      protected setListFri_result getResult(I iface, setListFri_args args) throws org.apache.thrift.TException {
        setListFri_result result = new setListFri_result();
        iface.setListFri(args.me, args.friend);
        return result;
      }
    }

    private static class getReqFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getReqFri_args> {
      public getReqFri() {
        super("getReqFri");
      }

      protected getReqFri_args getEmptyArgsInstance() {
        return new getReqFri_args();
      }

      protected getReqFri_result getResult(I iface, getReqFri_args args) throws org.apache.thrift.TException {
        getReqFri_result result = new getReqFri_result();
        result.success = iface.getReqFri(args.uid);
        return result;
      }
    }

    private static class getRecFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecFri_args> {
      public getRecFri() {
        super("getRecFri");
      }

      protected getRecFri_args getEmptyArgsInstance() {
        return new getRecFri_args();
      }

      protected getRecFri_result getResult(I iface, getRecFri_args args) throws org.apache.thrift.TException {
        getRecFri_result result = new getRecFri_result();
        result.success = iface.getRecFri(args.uid);
        return result;
      }
    }

    private static class getListFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListFri_args> {
      public getListFri() {
        super("getListFri");
      }

      protected getListFri_args getEmptyArgsInstance() {
        return new getListFri_args();
      }

      protected getListFri_result getResult(I iface, getListFri_args args) throws org.apache.thrift.TException {
        getListFri_result result = new getListFri_result();
        result.success = iface.getListFri(args.uid);
        return result;
      }
    }

    private static class delReqFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delReqFri_args> {
      public delReqFri() {
        super("delReqFri");
      }

      protected delReqFri_args getEmptyArgsInstance() {
        return new delReqFri_args();
      }

      protected delReqFri_result getResult(I iface, delReqFri_args args) throws org.apache.thrift.TException {
        delReqFri_result result = new delReqFri_result();
        iface.delReqFri(args.me, args.friend);
        return result;
      }
    }

    private static class delRecFri<I extends Iface> extends org.apache.thrift.ProcessFunction<I, delRecFri_args> {
      public delRecFri() {
        super("delRecFri");
      }

      protected delRecFri_args getEmptyArgsInstance() {
        return new delRecFri_args();
      }

      protected delRecFri_result getResult(I iface, delRecFri_args args) throws org.apache.thrift.TException {
        delRecFri_result result = new delRecFri_result();
        iface.delRecFri(args.me, args.friend);
        return result;
      }
    }

  }

  public static class setReqFri_args implements org.apache.thrift.TBase<setReqFri_args, setReqFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setReqFri_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setReqFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setReqFri_argsTupleSchemeFactory());
    }

    public Friend me; // required
    public Friend friend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      FRIEND((short)2, "friend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // FRIEND
            return FRIEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReqFri_args.class, metaDataMap);
    }

    public setReqFri_args() {
    }

    public setReqFri_args(
      Friend me,
      Friend friend)
    {
      this();
      this.me = me;
      this.friend = friend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReqFri_args(setReqFri_args other) {
      if (other.isSetMe()) {
        this.me = new Friend(other.me);
      }
      if (other.isSetFriend()) {
        this.friend = new Friend(other.friend);
      }
    }

    public setReqFri_args deepCopy() {
      return new setReqFri_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.friend = null;
    }

    public Friend getMe() {
      return this.me;
    }

    public setReqFri_args setMe(Friend me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public Friend getFriend() {
      return this.friend;
    }

    public setReqFri_args setFriend(Friend friend) {
      this.friend = friend;
      return this;
    }

    public void unsetFriend() {
      this.friend = null;
    }

    /** Returns true if field friend is set (has been assigned a value) and false otherwise */
    public boolean isSetFriend() {
      return this.friend != null;
    }

    public void setFriendIsSet(boolean value) {
      if (!value) {
        this.friend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((Friend)value);
        }
        break;

      case FRIEND:
        if (value == null) {
          unsetFriend();
        } else {
          setFriend((Friend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case FRIEND:
        return getFriend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case FRIEND:
        return isSetFriend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReqFri_args)
        return this.equals((setReqFri_args)that);
      return false;
    }

    public boolean equals(setReqFri_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_friend = true && this.isSetFriend();
      boolean that_present_friend = true && that.isSetFriend();
      if (this_present_friend || that_present_friend) {
        if (!(this_present_friend && that_present_friend))
          return false;
        if (!this.friend.equals(that.friend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setReqFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setReqFri_args typedOther = (setReqFri_args)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFriend()).compareTo(typedOther.isSetFriend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, typedOther.friend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReqFri_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friend:");
      if (this.friend == null) {
        sb.append("null");
      } else {
        sb.append(this.friend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setReqFri_argsStandardSchemeFactory implements SchemeFactory {
      public setReqFri_argsStandardScheme getScheme() {
        return new setReqFri_argsStandardScheme();
      }
    }

    private static class setReqFri_argsStandardScheme extends StandardScheme<setReqFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setReqFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new Friend();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRIEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friend = new Friend();
                struct.friend.read(iprot);
                struct.setFriendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setReqFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.friend != null) {
          oprot.writeFieldBegin(FRIEND_FIELD_DESC);
          struct.friend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setReqFri_argsTupleSchemeFactory implements SchemeFactory {
      public setReqFri_argsTupleScheme getScheme() {
        return new setReqFri_argsTupleScheme();
      }
    }

    private static class setReqFri_argsTupleScheme extends TupleScheme<setReqFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetFriend()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetFriend()) {
          struct.friend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new Friend();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.friend = new Friend();
          struct.friend.read(iprot);
          struct.setFriendIsSet(true);
        }
      }
    }

  }

  public static class setReqFri_result implements org.apache.thrift.TBase<setReqFri_result, setReqFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setReqFri_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setReqFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setReqFri_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setReqFri_result.class, metaDataMap);
    }

    public setReqFri_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setReqFri_result(setReqFri_result other) {
    }

    public setReqFri_result deepCopy() {
      return new setReqFri_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setReqFri_result)
        return this.equals((setReqFri_result)that);
      return false;
    }

    public boolean equals(setReqFri_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setReqFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setReqFri_result typedOther = (setReqFri_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setReqFri_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setReqFri_resultStandardSchemeFactory implements SchemeFactory {
      public setReqFri_resultStandardScheme getScheme() {
        return new setReqFri_resultStandardScheme();
      }
    }

    private static class setReqFri_resultStandardScheme extends StandardScheme<setReqFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setReqFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setReqFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setReqFri_resultTupleSchemeFactory implements SchemeFactory {
      public setReqFri_resultTupleScheme getScheme() {
        return new setReqFri_resultTupleScheme();
      }
    }

    private static class setReqFri_resultTupleScheme extends TupleScheme<setReqFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setRecFri_args implements org.apache.thrift.TBase<setRecFri_args, setRecFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRecFri_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRecFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRecFri_argsTupleSchemeFactory());
    }

    public Friend me; // required
    public Friend friend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      FRIEND((short)2, "friend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // FRIEND
            return FRIEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRecFri_args.class, metaDataMap);
    }

    public setRecFri_args() {
    }

    public setRecFri_args(
      Friend me,
      Friend friend)
    {
      this();
      this.me = me;
      this.friend = friend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRecFri_args(setRecFri_args other) {
      if (other.isSetMe()) {
        this.me = new Friend(other.me);
      }
      if (other.isSetFriend()) {
        this.friend = new Friend(other.friend);
      }
    }

    public setRecFri_args deepCopy() {
      return new setRecFri_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.friend = null;
    }

    public Friend getMe() {
      return this.me;
    }

    public setRecFri_args setMe(Friend me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public Friend getFriend() {
      return this.friend;
    }

    public setRecFri_args setFriend(Friend friend) {
      this.friend = friend;
      return this;
    }

    public void unsetFriend() {
      this.friend = null;
    }

    /** Returns true if field friend is set (has been assigned a value) and false otherwise */
    public boolean isSetFriend() {
      return this.friend != null;
    }

    public void setFriendIsSet(boolean value) {
      if (!value) {
        this.friend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((Friend)value);
        }
        break;

      case FRIEND:
        if (value == null) {
          unsetFriend();
        } else {
          setFriend((Friend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case FRIEND:
        return getFriend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case FRIEND:
        return isSetFriend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRecFri_args)
        return this.equals((setRecFri_args)that);
      return false;
    }

    public boolean equals(setRecFri_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_friend = true && this.isSetFriend();
      boolean that_present_friend = true && that.isSetFriend();
      if (this_present_friend || that_present_friend) {
        if (!(this_present_friend && that_present_friend))
          return false;
        if (!this.friend.equals(that.friend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRecFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRecFri_args typedOther = (setRecFri_args)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFriend()).compareTo(typedOther.isSetFriend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, typedOther.friend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRecFri_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friend:");
      if (this.friend == null) {
        sb.append("null");
      } else {
        sb.append(this.friend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRecFri_argsStandardSchemeFactory implements SchemeFactory {
      public setRecFri_argsStandardScheme getScheme() {
        return new setRecFri_argsStandardScheme();
      }
    }

    private static class setRecFri_argsStandardScheme extends StandardScheme<setRecFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRecFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new Friend();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRIEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friend = new Friend();
                struct.friend.read(iprot);
                struct.setFriendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRecFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.friend != null) {
          oprot.writeFieldBegin(FRIEND_FIELD_DESC);
          struct.friend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRecFri_argsTupleSchemeFactory implements SchemeFactory {
      public setRecFri_argsTupleScheme getScheme() {
        return new setRecFri_argsTupleScheme();
      }
    }

    private static class setRecFri_argsTupleScheme extends TupleScheme<setRecFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetFriend()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetFriend()) {
          struct.friend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new Friend();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.friend = new Friend();
          struct.friend.read(iprot);
          struct.setFriendIsSet(true);
        }
      }
    }

  }

  public static class setRecFri_result implements org.apache.thrift.TBase<setRecFri_result, setRecFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRecFri_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRecFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRecFri_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRecFri_result.class, metaDataMap);
    }

    public setRecFri_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRecFri_result(setRecFri_result other) {
    }

    public setRecFri_result deepCopy() {
      return new setRecFri_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRecFri_result)
        return this.equals((setRecFri_result)that);
      return false;
    }

    public boolean equals(setRecFri_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setRecFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setRecFri_result typedOther = (setRecFri_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRecFri_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRecFri_resultStandardSchemeFactory implements SchemeFactory {
      public setRecFri_resultStandardScheme getScheme() {
        return new setRecFri_resultStandardScheme();
      }
    }

    private static class setRecFri_resultStandardScheme extends StandardScheme<setRecFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRecFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRecFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRecFri_resultTupleSchemeFactory implements SchemeFactory {
      public setRecFri_resultTupleScheme getScheme() {
        return new setRecFri_resultTupleScheme();
      }
    }

    private static class setRecFri_resultTupleScheme extends TupleScheme<setRecFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class setListFri_args implements org.apache.thrift.TBase<setListFri_args, setListFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setListFri_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setListFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setListFri_argsTupleSchemeFactory());
    }

    public Friend me; // required
    public Friend friend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      FRIEND((short)2, "friend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // FRIEND
            return FRIEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setListFri_args.class, metaDataMap);
    }

    public setListFri_args() {
    }

    public setListFri_args(
      Friend me,
      Friend friend)
    {
      this();
      this.me = me;
      this.friend = friend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setListFri_args(setListFri_args other) {
      if (other.isSetMe()) {
        this.me = new Friend(other.me);
      }
      if (other.isSetFriend()) {
        this.friend = new Friend(other.friend);
      }
    }

    public setListFri_args deepCopy() {
      return new setListFri_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.friend = null;
    }

    public Friend getMe() {
      return this.me;
    }

    public setListFri_args setMe(Friend me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public Friend getFriend() {
      return this.friend;
    }

    public setListFri_args setFriend(Friend friend) {
      this.friend = friend;
      return this;
    }

    public void unsetFriend() {
      this.friend = null;
    }

    /** Returns true if field friend is set (has been assigned a value) and false otherwise */
    public boolean isSetFriend() {
      return this.friend != null;
    }

    public void setFriendIsSet(boolean value) {
      if (!value) {
        this.friend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((Friend)value);
        }
        break;

      case FRIEND:
        if (value == null) {
          unsetFriend();
        } else {
          setFriend((Friend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case FRIEND:
        return getFriend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case FRIEND:
        return isSetFriend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setListFri_args)
        return this.equals((setListFri_args)that);
      return false;
    }

    public boolean equals(setListFri_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_friend = true && this.isSetFriend();
      boolean that_present_friend = true && that.isSetFriend();
      if (this_present_friend || that_present_friend) {
        if (!(this_present_friend && that_present_friend))
          return false;
        if (!this.friend.equals(that.friend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setListFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setListFri_args typedOther = (setListFri_args)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFriend()).compareTo(typedOther.isSetFriend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, typedOther.friend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setListFri_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friend:");
      if (this.friend == null) {
        sb.append("null");
      } else {
        sb.append(this.friend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setListFri_argsStandardSchemeFactory implements SchemeFactory {
      public setListFri_argsStandardScheme getScheme() {
        return new setListFri_argsStandardScheme();
      }
    }

    private static class setListFri_argsStandardScheme extends StandardScheme<setListFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setListFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new Friend();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRIEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friend = new Friend();
                struct.friend.read(iprot);
                struct.setFriendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setListFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.friend != null) {
          oprot.writeFieldBegin(FRIEND_FIELD_DESC);
          struct.friend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setListFri_argsTupleSchemeFactory implements SchemeFactory {
      public setListFri_argsTupleScheme getScheme() {
        return new setListFri_argsTupleScheme();
      }
    }

    private static class setListFri_argsTupleScheme extends TupleScheme<setListFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setListFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetFriend()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetFriend()) {
          struct.friend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setListFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new Friend();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.friend = new Friend();
          struct.friend.read(iprot);
          struct.setFriendIsSet(true);
        }
      }
    }

  }

  public static class setListFri_result implements org.apache.thrift.TBase<setListFri_result, setListFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setListFri_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setListFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setListFri_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setListFri_result.class, metaDataMap);
    }

    public setListFri_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setListFri_result(setListFri_result other) {
    }

    public setListFri_result deepCopy() {
      return new setListFri_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setListFri_result)
        return this.equals((setListFri_result)that);
      return false;
    }

    public boolean equals(setListFri_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(setListFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      setListFri_result typedOther = (setListFri_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setListFri_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setListFri_resultStandardSchemeFactory implements SchemeFactory {
      public setListFri_resultStandardScheme getScheme() {
        return new setListFri_resultStandardScheme();
      }
    }

    private static class setListFri_resultStandardScheme extends StandardScheme<setListFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setListFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setListFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setListFri_resultTupleSchemeFactory implements SchemeFactory {
      public setListFri_resultTupleScheme getScheme() {
        return new setListFri_resultTupleScheme();
      }
    }

    private static class setListFri_resultTupleScheme extends TupleScheme<setListFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setListFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setListFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getReqFri_args implements org.apache.thrift.TBase<getReqFri_args, getReqFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReqFri_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReqFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReqFri_argsTupleSchemeFactory());
    }

    public int uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReqFri_args.class, metaDataMap);
    }

    public getReqFri_args() {
    }

    public getReqFri_args(
      int uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReqFri_args(getReqFri_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
    }

    public getReqFri_args deepCopy() {
      return new getReqFri_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public int getUid() {
      return this.uid;
    }

    public getReqFri_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReqFri_args)
        return this.equals((getReqFri_args)that);
      return false;
    }

    public boolean equals(getReqFri_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReqFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReqFri_args typedOther = (getReqFri_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReqFri_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReqFri_argsStandardSchemeFactory implements SchemeFactory {
      public getReqFri_argsStandardScheme getScheme() {
        return new getReqFri_argsStandardScheme();
      }
    }

    private static class getReqFri_argsStandardScheme extends StandardScheme<getReqFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReqFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReqFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReqFri_argsTupleSchemeFactory implements SchemeFactory {
      public getReqFri_argsTupleScheme getScheme() {
        return new getReqFri_argsTupleScheme();
      }
    }

    private static class getReqFri_argsTupleScheme extends TupleScheme<getReqFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getReqFri_result implements org.apache.thrift.TBase<getReqFri_result, getReqFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getReqFri_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getReqFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getReqFri_resultTupleSchemeFactory());
    }

    public List<Friend> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getReqFri_result.class, metaDataMap);
    }

    public getReqFri_result() {
    }

    public getReqFri_result(
      List<Friend> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReqFri_result(getReqFri_result other) {
      if (other.isSetSuccess()) {
        List<Friend> __this__success = new ArrayList<Friend>();
        for (Friend other_element : other.success) {
          __this__success.add(new Friend(other_element));
        }
        this.success = __this__success;
      }
    }

    public getReqFri_result deepCopy() {
      return new getReqFri_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Friend> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Friend elem) {
      if (this.success == null) {
        this.success = new ArrayList<Friend>();
      }
      this.success.add(elem);
    }

    public List<Friend> getSuccess() {
      return this.success;
    }

    public getReqFri_result setSuccess(List<Friend> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Friend>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReqFri_result)
        return this.equals((getReqFri_result)that);
      return false;
    }

    public boolean equals(getReqFri_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getReqFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getReqFri_result typedOther = (getReqFri_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getReqFri_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getReqFri_resultStandardSchemeFactory implements SchemeFactory {
      public getReqFri_resultStandardScheme getScheme() {
        return new getReqFri_resultStandardScheme();
      }
    }

    private static class getReqFri_resultStandardScheme extends StandardScheme<getReqFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getReqFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Friend>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Friend _elem2; // required
                    _elem2 = new Friend();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getReqFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Friend _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getReqFri_resultTupleSchemeFactory implements SchemeFactory {
      public getReqFri_resultTupleScheme getScheme() {
        return new getReqFri_resultTupleScheme();
      }
    }

    private static class getReqFri_resultTupleScheme extends TupleScheme<getReqFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Friend _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Friend>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Friend _elem7; // required
              _elem7 = new Friend();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRecFri_args implements org.apache.thrift.TBase<getRecFri_args, getRecFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecFri_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecFri_argsTupleSchemeFactory());
    }

    public int uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecFri_args.class, metaDataMap);
    }

    public getRecFri_args() {
    }

    public getRecFri_args(
      int uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecFri_args(getRecFri_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
    }

    public getRecFri_args deepCopy() {
      return new getRecFri_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public int getUid() {
      return this.uid;
    }

    public getRecFri_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecFri_args)
        return this.equals((getRecFri_args)that);
      return false;
    }

    public boolean equals(getRecFri_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecFri_args typedOther = (getRecFri_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecFri_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecFri_argsStandardSchemeFactory implements SchemeFactory {
      public getRecFri_argsStandardScheme getScheme() {
        return new getRecFri_argsStandardScheme();
      }
    }

    private static class getRecFri_argsStandardScheme extends StandardScheme<getRecFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecFri_argsTupleSchemeFactory implements SchemeFactory {
      public getRecFri_argsTupleScheme getScheme() {
        return new getRecFri_argsTupleScheme();
      }
    }

    private static class getRecFri_argsTupleScheme extends TupleScheme<getRecFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getRecFri_result implements org.apache.thrift.TBase<getRecFri_result, getRecFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecFri_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecFri_resultTupleSchemeFactory());
    }

    public List<Friend> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecFri_result.class, metaDataMap);
    }

    public getRecFri_result() {
    }

    public getRecFri_result(
      List<Friend> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecFri_result(getRecFri_result other) {
      if (other.isSetSuccess()) {
        List<Friend> __this__success = new ArrayList<Friend>();
        for (Friend other_element : other.success) {
          __this__success.add(new Friend(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRecFri_result deepCopy() {
      return new getRecFri_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Friend> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Friend elem) {
      if (this.success == null) {
        this.success = new ArrayList<Friend>();
      }
      this.success.add(elem);
    }

    public List<Friend> getSuccess() {
      return this.success;
    }

    public getRecFri_result setSuccess(List<Friend> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Friend>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecFri_result)
        return this.equals((getRecFri_result)that);
      return false;
    }

    public boolean equals(getRecFri_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getRecFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getRecFri_result typedOther = (getRecFri_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecFri_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecFri_resultStandardSchemeFactory implements SchemeFactory {
      public getRecFri_resultStandardScheme getScheme() {
        return new getRecFri_resultStandardScheme();
      }
    }

    private static class getRecFri_resultStandardScheme extends StandardScheme<getRecFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Friend>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Friend _elem10; // required
                    _elem10 = new Friend();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Friend _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecFri_resultTupleSchemeFactory implements SchemeFactory {
      public getRecFri_resultTupleScheme getScheme() {
        return new getRecFri_resultTupleScheme();
      }
    }

    private static class getRecFri_resultTupleScheme extends TupleScheme<getRecFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Friend _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Friend>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Friend _elem15; // required
              _elem15 = new Friend();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListFri_args implements org.apache.thrift.TBase<getListFri_args, getListFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListFri_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListFri_argsTupleSchemeFactory());
    }

    public int uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListFri_args.class, metaDataMap);
    }

    public getListFri_args() {
    }

    public getListFri_args(
      int uid)
    {
      this();
      this.uid = uid;
      setUidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListFri_args(getListFri_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      this.uid = other.uid;
    }

    public getListFri_args deepCopy() {
      return new getListFri_args(this);
    }

    @Override
    public void clear() {
      setUidIsSet(false);
      this.uid = 0;
    }

    public int getUid() {
      return this.uid;
    }

    public getListFri_args setUid(int uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bit_vector.clear(__UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return __isset_bit_vector.get(__UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bit_vector.set(__UID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return Integer.valueOf(getUid());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListFri_args)
        return this.equals((getListFri_args)that);
      return false;
    }

    public boolean equals(getListFri_args that) {
      if (that == null)
        return false;

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListFri_args typedOther = (getListFri_args)other;

      lastComparison = Boolean.valueOf(isSetUid()).compareTo(typedOther.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, typedOther.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListFri_args(");
      boolean first = true;

      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListFri_argsStandardSchemeFactory implements SchemeFactory {
      public getListFri_argsStandardScheme getScheme() {
        return new getListFri_argsStandardScheme();
      }
    }

    private static class getListFri_argsStandardScheme extends StandardScheme<getListFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.uid = iprot.readI32();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI32(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListFri_argsTupleSchemeFactory implements SchemeFactory {
      public getListFri_argsTupleScheme getScheme() {
        return new getListFri_argsTupleScheme();
      }
    }

    private static class getListFri_argsTupleScheme extends TupleScheme<getListFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUid()) {
          oprot.writeI32(struct.uid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.uid = iprot.readI32();
          struct.setUidIsSet(true);
        }
      }
    }

  }

  public static class getListFri_result implements org.apache.thrift.TBase<getListFri_result, getListFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListFri_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListFri_resultTupleSchemeFactory());
    }

    public List<Friend> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListFri_result.class, metaDataMap);
    }

    public getListFri_result() {
    }

    public getListFri_result(
      List<Friend> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListFri_result(getListFri_result other) {
      if (other.isSetSuccess()) {
        List<Friend> __this__success = new ArrayList<Friend>();
        for (Friend other_element : other.success) {
          __this__success.add(new Friend(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListFri_result deepCopy() {
      return new getListFri_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Friend> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Friend elem) {
      if (this.success == null) {
        this.success = new ArrayList<Friend>();
      }
      this.success.add(elem);
    }

    public List<Friend> getSuccess() {
      return this.success;
    }

    public getListFri_result setSuccess(List<Friend> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Friend>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListFri_result)
        return this.equals((getListFri_result)that);
      return false;
    }

    public boolean equals(getListFri_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getListFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getListFri_result typedOther = (getListFri_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListFri_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListFri_resultStandardSchemeFactory implements SchemeFactory {
      public getListFri_resultStandardScheme getScheme() {
        return new getListFri_resultStandardScheme();
      }
    }

    private static class getListFri_resultStandardScheme extends StandardScheme<getListFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Friend>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    Friend _elem18; // required
                    _elem18 = new Friend();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Friend _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListFri_resultTupleSchemeFactory implements SchemeFactory {
      public getListFri_resultTupleScheme getScheme() {
        return new getListFri_resultTupleScheme();
      }
    }

    private static class getListFri_resultTupleScheme extends TupleScheme<getListFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Friend _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Friend>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              Friend _elem23; // required
              _elem23 = new Friend();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class delReqFri_args implements org.apache.thrift.TBase<delReqFri_args, delReqFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delReqFri_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delReqFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delReqFri_argsTupleSchemeFactory());
    }

    public Friend me; // required
    public Friend friend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      FRIEND((short)2, "friend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // FRIEND
            return FRIEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delReqFri_args.class, metaDataMap);
    }

    public delReqFri_args() {
    }

    public delReqFri_args(
      Friend me,
      Friend friend)
    {
      this();
      this.me = me;
      this.friend = friend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delReqFri_args(delReqFri_args other) {
      if (other.isSetMe()) {
        this.me = new Friend(other.me);
      }
      if (other.isSetFriend()) {
        this.friend = new Friend(other.friend);
      }
    }

    public delReqFri_args deepCopy() {
      return new delReqFri_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.friend = null;
    }

    public Friend getMe() {
      return this.me;
    }

    public delReqFri_args setMe(Friend me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public Friend getFriend() {
      return this.friend;
    }

    public delReqFri_args setFriend(Friend friend) {
      this.friend = friend;
      return this;
    }

    public void unsetFriend() {
      this.friend = null;
    }

    /** Returns true if field friend is set (has been assigned a value) and false otherwise */
    public boolean isSetFriend() {
      return this.friend != null;
    }

    public void setFriendIsSet(boolean value) {
      if (!value) {
        this.friend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((Friend)value);
        }
        break;

      case FRIEND:
        if (value == null) {
          unsetFriend();
        } else {
          setFriend((Friend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case FRIEND:
        return getFriend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case FRIEND:
        return isSetFriend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delReqFri_args)
        return this.equals((delReqFri_args)that);
      return false;
    }

    public boolean equals(delReqFri_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_friend = true && this.isSetFriend();
      boolean that_present_friend = true && that.isSetFriend();
      if (this_present_friend || that_present_friend) {
        if (!(this_present_friend && that_present_friend))
          return false;
        if (!this.friend.equals(that.friend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delReqFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delReqFri_args typedOther = (delReqFri_args)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFriend()).compareTo(typedOther.isSetFriend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, typedOther.friend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delReqFri_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friend:");
      if (this.friend == null) {
        sb.append("null");
      } else {
        sb.append(this.friend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delReqFri_argsStandardSchemeFactory implements SchemeFactory {
      public delReqFri_argsStandardScheme getScheme() {
        return new delReqFri_argsStandardScheme();
      }
    }

    private static class delReqFri_argsStandardScheme extends StandardScheme<delReqFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delReqFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new Friend();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRIEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friend = new Friend();
                struct.friend.read(iprot);
                struct.setFriendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delReqFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.friend != null) {
          oprot.writeFieldBegin(FRIEND_FIELD_DESC);
          struct.friend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delReqFri_argsTupleSchemeFactory implements SchemeFactory {
      public delReqFri_argsTupleScheme getScheme() {
        return new delReqFri_argsTupleScheme();
      }
    }

    private static class delReqFri_argsTupleScheme extends TupleScheme<delReqFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetFriend()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetFriend()) {
          struct.friend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delReqFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new Friend();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.friend = new Friend();
          struct.friend.read(iprot);
          struct.setFriendIsSet(true);
        }
      }
    }

  }

  public static class delReqFri_result implements org.apache.thrift.TBase<delReqFri_result, delReqFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delReqFri_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delReqFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delReqFri_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delReqFri_result.class, metaDataMap);
    }

    public delReqFri_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delReqFri_result(delReqFri_result other) {
    }

    public delReqFri_result deepCopy() {
      return new delReqFri_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delReqFri_result)
        return this.equals((delReqFri_result)that);
      return false;
    }

    public boolean equals(delReqFri_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delReqFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delReqFri_result typedOther = (delReqFri_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delReqFri_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delReqFri_resultStandardSchemeFactory implements SchemeFactory {
      public delReqFri_resultStandardScheme getScheme() {
        return new delReqFri_resultStandardScheme();
      }
    }

    private static class delReqFri_resultStandardScheme extends StandardScheme<delReqFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delReqFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delReqFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delReqFri_resultTupleSchemeFactory implements SchemeFactory {
      public delReqFri_resultTupleScheme getScheme() {
        return new delReqFri_resultTupleScheme();
      }
    }

    private static class delReqFri_resultTupleScheme extends TupleScheme<delReqFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delReqFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class delRecFri_args implements org.apache.thrift.TBase<delRecFri_args, delRecFri_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecFri_args");

    private static final org.apache.thrift.protocol.TField ME_FIELD_DESC = new org.apache.thrift.protocol.TField("me", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("friend", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecFri_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecFri_argsTupleSchemeFactory());
    }

    public Friend me; // required
    public Friend friend; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ME((short)1, "me"),
      FRIEND((short)2, "friend");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ME
            return ME;
          case 2: // FRIEND
            return FRIEND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ME, new org.apache.thrift.meta_data.FieldMetaData("me", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      tmpMap.put(_Fields.FRIEND, new org.apache.thrift.meta_data.FieldMetaData("friend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Friend.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecFri_args.class, metaDataMap);
    }

    public delRecFri_args() {
    }

    public delRecFri_args(
      Friend me,
      Friend friend)
    {
      this();
      this.me = me;
      this.friend = friend;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecFri_args(delRecFri_args other) {
      if (other.isSetMe()) {
        this.me = new Friend(other.me);
      }
      if (other.isSetFriend()) {
        this.friend = new Friend(other.friend);
      }
    }

    public delRecFri_args deepCopy() {
      return new delRecFri_args(this);
    }

    @Override
    public void clear() {
      this.me = null;
      this.friend = null;
    }

    public Friend getMe() {
      return this.me;
    }

    public delRecFri_args setMe(Friend me) {
      this.me = me;
      return this;
    }

    public void unsetMe() {
      this.me = null;
    }

    /** Returns true if field me is set (has been assigned a value) and false otherwise */
    public boolean isSetMe() {
      return this.me != null;
    }

    public void setMeIsSet(boolean value) {
      if (!value) {
        this.me = null;
      }
    }

    public Friend getFriend() {
      return this.friend;
    }

    public delRecFri_args setFriend(Friend friend) {
      this.friend = friend;
      return this;
    }

    public void unsetFriend() {
      this.friend = null;
    }

    /** Returns true if field friend is set (has been assigned a value) and false otherwise */
    public boolean isSetFriend() {
      return this.friend != null;
    }

    public void setFriendIsSet(boolean value) {
      if (!value) {
        this.friend = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ME:
        if (value == null) {
          unsetMe();
        } else {
          setMe((Friend)value);
        }
        break;

      case FRIEND:
        if (value == null) {
          unsetFriend();
        } else {
          setFriend((Friend)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ME:
        return getMe();

      case FRIEND:
        return getFriend();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ME:
        return isSetMe();
      case FRIEND:
        return isSetFriend();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecFri_args)
        return this.equals((delRecFri_args)that);
      return false;
    }

    public boolean equals(delRecFri_args that) {
      if (that == null)
        return false;

      boolean this_present_me = true && this.isSetMe();
      boolean that_present_me = true && that.isSetMe();
      if (this_present_me || that_present_me) {
        if (!(this_present_me && that_present_me))
          return false;
        if (!this.me.equals(that.me))
          return false;
      }

      boolean this_present_friend = true && this.isSetFriend();
      boolean that_present_friend = true && that.isSetFriend();
      if (this_present_friend || that_present_friend) {
        if (!(this_present_friend && that_present_friend))
          return false;
        if (!this.friend.equals(that.friend))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delRecFri_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delRecFri_args typedOther = (delRecFri_args)other;

      lastComparison = Boolean.valueOf(isSetMe()).compareTo(typedOther.isSetMe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.me, typedOther.me);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFriend()).compareTo(typedOther.isSetFriend());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriend()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friend, typedOther.friend);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecFri_args(");
      boolean first = true;

      sb.append("me:");
      if (this.me == null) {
        sb.append("null");
      } else {
        sb.append(this.me);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friend:");
      if (this.friend == null) {
        sb.append("null");
      } else {
        sb.append(this.friend);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecFri_argsStandardSchemeFactory implements SchemeFactory {
      public delRecFri_argsStandardScheme getScheme() {
        return new delRecFri_argsStandardScheme();
      }
    }

    private static class delRecFri_argsStandardScheme extends StandardScheme<delRecFri_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecFri_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.me = new Friend();
                struct.me.read(iprot);
                struct.setMeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FRIEND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friend = new Friend();
                struct.friend.read(iprot);
                struct.setFriendIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecFri_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.me != null) {
          oprot.writeFieldBegin(ME_FIELD_DESC);
          struct.me.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.friend != null) {
          oprot.writeFieldBegin(FRIEND_FIELD_DESC);
          struct.friend.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecFri_argsTupleSchemeFactory implements SchemeFactory {
      public delRecFri_argsTupleScheme getScheme() {
        return new delRecFri_argsTupleScheme();
      }
    }

    private static class delRecFri_argsTupleScheme extends TupleScheme<delRecFri_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMe()) {
          optionals.set(0);
        }
        if (struct.isSetFriend()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMe()) {
          struct.me.write(oprot);
        }
        if (struct.isSetFriend()) {
          struct.friend.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecFri_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.me = new Friend();
          struct.me.read(iprot);
          struct.setMeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.friend = new Friend();
          struct.friend.read(iprot);
          struct.setFriendIsSet(true);
        }
      }
    }

  }

  public static class delRecFri_result implements org.apache.thrift.TBase<delRecFri_result, delRecFri_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("delRecFri_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new delRecFri_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new delRecFri_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(delRecFri_result.class, metaDataMap);
    }

    public delRecFri_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public delRecFri_result(delRecFri_result other) {
    }

    public delRecFri_result deepCopy() {
      return new delRecFri_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof delRecFri_result)
        return this.equals((delRecFri_result)that);
      return false;
    }

    public boolean equals(delRecFri_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(delRecFri_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      delRecFri_result typedOther = (delRecFri_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("delRecFri_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class delRecFri_resultStandardSchemeFactory implements SchemeFactory {
      public delRecFri_resultStandardScheme getScheme() {
        return new delRecFri_resultStandardScheme();
      }
    }

    private static class delRecFri_resultStandardScheme extends StandardScheme<delRecFri_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, delRecFri_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, delRecFri_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class delRecFri_resultTupleSchemeFactory implements SchemeFactory {
      public delRecFri_resultTupleScheme getScheme() {
        return new delRecFri_resultTupleScheme();
      }
    }

    private static class delRecFri_resultTupleScheme extends TupleScheme<delRecFri_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, delRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, delRecFri_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
