//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./friend_types');
//HELPER FUNCTIONS AND STRUCTURES

var FriendService_setReqFri_args = function(args) {
  this.me = null;
  this.friend = null;
  if (args) {
    if (args.me !== undefined) {
      this.me = args.me;
    }
    if (args.friend !== undefined) {
      this.friend = args.friend;
    }
  }
};
FriendService_setReqFri_args.prototype = {};
FriendService_setReqFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.Friend();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.friend = new ttypes.Friend();
        this.friend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setReqFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setReqFri_args');
  if (this.me) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  if (this.friend) {
    output.writeFieldBegin('friend', Thrift.Type.STRUCT, 2);
    this.friend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_setReqFri_result = function(args) {
};
FriendService_setReqFri_result.prototype = {};
FriendService_setReqFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setReqFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setReqFri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_setRecFri_args = function(args) {
  this.me = null;
  this.friend = null;
  if (args) {
    if (args.me !== undefined) {
      this.me = args.me;
    }
    if (args.friend !== undefined) {
      this.friend = args.friend;
    }
  }
};
FriendService_setRecFri_args.prototype = {};
FriendService_setRecFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.Friend();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.friend = new ttypes.Friend();
        this.friend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setRecFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setRecFri_args');
  if (this.me) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  if (this.friend) {
    output.writeFieldBegin('friend', Thrift.Type.STRUCT, 2);
    this.friend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_setRecFri_result = function(args) {
};
FriendService_setRecFri_result.prototype = {};
FriendService_setRecFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setRecFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setRecFri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_setListFri_args = function(args) {
  this.me = null;
  this.friend = null;
  if (args) {
    if (args.me !== undefined) {
      this.me = args.me;
    }
    if (args.friend !== undefined) {
      this.friend = args.friend;
    }
  }
};
FriendService_setListFri_args.prototype = {};
FriendService_setListFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.Friend();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.friend = new ttypes.Friend();
        this.friend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setListFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setListFri_args');
  if (this.me) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  if (this.friend) {
    output.writeFieldBegin('friend', Thrift.Type.STRUCT, 2);
    this.friend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_setListFri_result = function(args) {
};
FriendService_setListFri_result.prototype = {};
FriendService_setListFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_setListFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_setListFri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getReqFri_args = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
  }
};
FriendService_getReqFri_args.prototype = {};
FriendService_getReqFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getReqFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getReqFri_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getReqFri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FriendService_getReqFri_result.prototype = {};
FriendService_getReqFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Friend();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getReqFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getReqFri_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getRecFri_args = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
  }
};
FriendService_getRecFri_args.prototype = {};
FriendService_getRecFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getRecFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getRecFri_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getRecFri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FriendService_getRecFri_result.prototype = {};
FriendService_getRecFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Friend();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getRecFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getRecFri_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getListFri_args = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
  }
};
FriendService_getListFri_args.prototype = {};
FriendService_getListFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getListFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getListFri_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_getListFri_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
FriendService_getListFri_result.prototype = {};
FriendService_getListFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Friend();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_getListFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_getListFri_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_delReqFri_args = function(args) {
  this.me = null;
  this.friend = null;
  if (args) {
    if (args.me !== undefined) {
      this.me = args.me;
    }
    if (args.friend !== undefined) {
      this.friend = args.friend;
    }
  }
};
FriendService_delReqFri_args.prototype = {};
FriendService_delReqFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.Friend();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.friend = new ttypes.Friend();
        this.friend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_delReqFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_delReqFri_args');
  if (this.me) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  if (this.friend) {
    output.writeFieldBegin('friend', Thrift.Type.STRUCT, 2);
    this.friend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_delReqFri_result = function(args) {
};
FriendService_delReqFri_result.prototype = {};
FriendService_delReqFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_delReqFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_delReqFri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_delRecFri_args = function(args) {
  this.me = null;
  this.friend = null;
  if (args) {
    if (args.me !== undefined) {
      this.me = args.me;
    }
    if (args.friend !== undefined) {
      this.friend = args.friend;
    }
  }
};
FriendService_delRecFri_args.prototype = {};
FriendService_delRecFri_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.Friend();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.friend = new ttypes.Friend();
        this.friend.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_delRecFri_args.prototype.write = function(output) {
  output.writeStructBegin('FriendService_delRecFri_args');
  if (this.me) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  if (this.friend) {
    output.writeFieldBegin('friend', Thrift.Type.STRUCT, 2);
    this.friend.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendService_delRecFri_result = function(args) {
};
FriendService_delRecFri_result.prototype = {};
FriendService_delRecFri_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FriendService_delRecFri_result.prototype.write = function(output) {
  output.writeStructBegin('FriendService_delRecFri_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FriendServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
FriendServiceClient.prototype = {};
FriendServiceClient.prototype.setReqFri = function(me, friend, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setReqFri(me, friend);
};

FriendServiceClient.prototype.send_setReqFri = function(me, friend) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setReqFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_setReqFri_args();
  args.me = me;
  args.friend = friend;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_setReqFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_setReqFri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FriendServiceClient.prototype.setRecFri = function(me, friend, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setRecFri(me, friend);
};

FriendServiceClient.prototype.send_setRecFri = function(me, friend) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setRecFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_setRecFri_args();
  args.me = me;
  args.friend = friend;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_setRecFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_setRecFri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FriendServiceClient.prototype.setListFri = function(me, friend, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setListFri(me, friend);
};

FriendServiceClient.prototype.send_setListFri = function(me, friend) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setListFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_setListFri_args();
  args.me = me;
  args.friend = friend;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_setListFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_setListFri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FriendServiceClient.prototype.getReqFri = function(uid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getReqFri(uid);
};

FriendServiceClient.prototype.send_getReqFri = function(uid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getReqFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_getReqFri_args();
  args.uid = uid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_getReqFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_getReqFri_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getReqFri failed: unknown result');
};
FriendServiceClient.prototype.getRecFri = function(uid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getRecFri(uid);
};

FriendServiceClient.prototype.send_getRecFri = function(uid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRecFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_getRecFri_args();
  args.uid = uid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_getRecFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_getRecFri_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRecFri failed: unknown result');
};
FriendServiceClient.prototype.getListFri = function(uid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getListFri(uid);
};

FriendServiceClient.prototype.send_getListFri = function(uid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getListFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_getListFri_args();
  args.uid = uid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_getListFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_getListFri_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getListFri failed: unknown result');
};
FriendServiceClient.prototype.delReqFri = function(me, friend, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_delReqFri(me, friend);
};

FriendServiceClient.prototype.send_delReqFri = function(me, friend) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delReqFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_delReqFri_args();
  args.me = me;
  args.friend = friend;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_delReqFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_delReqFri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
FriendServiceClient.prototype.delRecFri = function(me, friend, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_delRecFri(me, friend);
};

FriendServiceClient.prototype.send_delRecFri = function(me, friend) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('delRecFri', Thrift.MessageType.CALL, this.seqid);
  var args = new FriendService_delRecFri_args();
  args.me = me;
  args.friend = friend;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

FriendServiceClient.prototype.recv_delRecFri = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new FriendService_delRecFri_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
var FriendServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
FriendServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

FriendServiceProcessor.prototype.process_setReqFri = function(seqid, input, output) {
  var args = new FriendService_setReqFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_setReqFri_result();
  this._handler.setReqFri(args.me, args.friend, function (success) {
    result.success = success;
    output.writeMessageBegin("setReqFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_setRecFri = function(seqid, input, output) {
  var args = new FriendService_setRecFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_setRecFri_result();
  this._handler.setRecFri(args.me, args.friend, function (success) {
    result.success = success;
    output.writeMessageBegin("setRecFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_setListFri = function(seqid, input, output) {
  var args = new FriendService_setListFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_setListFri_result();
  this._handler.setListFri(args.me, args.friend, function (success) {
    result.success = success;
    output.writeMessageBegin("setListFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_getReqFri = function(seqid, input, output) {
  var args = new FriendService_getReqFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_getReqFri_result();
  this._handler.getReqFri(args.uid, function (success) {
    result.success = success;
    output.writeMessageBegin("getReqFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_getRecFri = function(seqid, input, output) {
  var args = new FriendService_getRecFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_getRecFri_result();
  this._handler.getRecFri(args.uid, function (success) {
    result.success = success;
    output.writeMessageBegin("getRecFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_getListFri = function(seqid, input, output) {
  var args = new FriendService_getListFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_getListFri_result();
  this._handler.getListFri(args.uid, function (success) {
    result.success = success;
    output.writeMessageBegin("getListFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_delReqFri = function(seqid, input, output) {
  var args = new FriendService_delReqFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_delReqFri_result();
  this._handler.delReqFri(args.me, args.friend, function (success) {
    result.success = success;
    output.writeMessageBegin("delReqFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

FriendServiceProcessor.prototype.process_delRecFri = function(seqid, input, output) {
  var args = new FriendService_delRecFri_args();
  args.read(input);
  input.readMessageEnd();
  var result = new FriendService_delRecFri_result();
  this._handler.delRecFri(args.me, args.friend, function (success) {
    result.success = success;
    output.writeMessageBegin("delRecFri", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

