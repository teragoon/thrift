//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var ttypes = module.exports = {};
var User = module.exports.User = function(args) {
  this.id = null;
  this.username = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.username !== undefined) {
      this.username = args.username;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.username) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AuthToken = module.exports.AuthToken = function(args) {
  this.user = null;
  this.password = null;
  this.authenticated = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.password !== undefined) {
      this.password = args.password;
    }
    if (args.authenticated !== undefined) {
      this.authenticated = args.authenticated;
    }
  }
};
AuthToken.prototype = {};
AuthToken.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.authenticated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthToken.prototype.write = function(output) {
  output.writeStructBegin('AuthToken');
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.password) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.authenticated) {
    output.writeFieldBegin('authenticated', Thrift.Type.BOOL, 3);
    output.writeBool(this.authenticated);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Poi = module.exports.Poi = function(args) {
  this.id = null;
  this.name = null;
  this.latitude = null;
  this.longitude = null;
  this.type = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
Poi.prototype = {};
Poi.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Poi.prototype.write = function(output) {
  output.writeStructBegin('Poi');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Post = module.exports.Post = function(args) {
  this.id = null;
  this.poi = null;
  this.user = null;
  this.subject = null;
  this.text = null;
  this.time = null;
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.poi !== undefined) {
      this.poi = args.poi;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.subject !== undefined) {
      this.subject = args.subject;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
Post.prototype = {};
Post.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.poi = new ttypes.Poi();
        this.poi.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Post.prototype.write = function(output) {
  output.writeStructBegin('Post');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.poi) {
    output.writeFieldBegin('poi', Thrift.Type.STRUCT, 2);
    this.poi.write(output);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 3);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.subject) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 4);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 5);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.time) {
    output.writeFieldBegin('time', Thrift.Type.I64, 6);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Comment = module.exports.Comment = function(args) {
  this.id = null;
  this.user = null;
  this.post = null;
  this.text = null;
  this.time = null;
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.user !== undefined) {
      this.user = args.user;
    }
    if (args.post !== undefined) {
      this.post = args.post;
    }
    if (args.text !== undefined) {
      this.text = args.text;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
Comment.prototype = {};
Comment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.post = new ttypes.Post();
        this.post.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Comment.prototype.write = function(output) {
  output.writeStructBegin('Comment');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 2);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.post) {
    output.writeFieldBegin('post', Thrift.Type.STRUCT, 3);
    this.post.write(output);
    output.writeFieldEnd();
  }
  if (this.text) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 4);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.time) {
    output.writeFieldBegin('time', Thrift.Type.I64, 5);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Attachment = module.exports.Attachment = function(args) {
  this.id = null;
  this.post = null;
  this.name = null;
  this.time = null;
  this.type = null;
  this.latitude = null;
  this.longitude = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.post !== undefined) {
      this.post = args.post;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
  }
};
Attachment.prototype = {};
Attachment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.post = new ttypes.Post();
        this.post.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attachment.prototype.write = function(output) {
  output.writeStructBegin('Attachment');
  if (this.id) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.post) {
    output.writeFieldBegin('post', Thrift.Type.STRUCT, 2);
    this.post.write(output);
    output.writeFieldEnd();
  }
  if (this.name) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.time) {
    output.writeFieldBegin('time', Thrift.Type.I64, 4);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.type) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.latitude) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

