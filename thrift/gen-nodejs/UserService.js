//
// Autogenerated by Thrift Compiler (0.8.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./user_types');
//HELPER FUNCTIONS AND STRUCTURES

var UserService_setUser_args = function(args) {
  this.user = null;
  if (args) {
    if (args.user !== undefined) {
      this.user = args.user;
    }
  }
};
UserService_setUser_args.prototype = {};
UserService_setUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_setUser_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_setUser_args');
  if (this.user) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_setUser_result = function(args) {
};
UserService_setUser_result.prototype = {};
UserService_setUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_setUser_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_setUser_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByEmail_args = function(args) {
  this.email = null;
  if (args) {
    if (args.email !== undefined) {
      this.email = args.email;
    }
  }
};
UserService_getUserByEmail_args.prototype = {};
UserService_getUserByEmail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByEmail_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByEmail_args');
  if (this.email) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByEmail_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByEmail_result.prototype = {};
UserService_getUserByEmail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByEmail_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByEmail_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByUid_args = function(args) {
  this.uid = null;
  if (args) {
    if (args.uid !== undefined) {
      this.uid = args.uid;
    }
  }
};
UserService_getUserByUid_args.prototype = {};
UserService_getUserByUid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.uid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByUid_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByUid_args');
  if (this.uid) {
    output.writeFieldBegin('uid', Thrift.Type.I32, 1);
    output.writeI32(this.uid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByUid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByUid_result.prototype = {};
UserService_getUserByUid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByUid_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByUid_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByNickName_args = function(args) {
  this.nickName = null;
  if (args) {
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
  }
};
UserService_getUserByNickName_args.prototype = {};
UserService_getUserByNickName_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByNickName_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByNickName_args');
  if (this.nickName) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 1);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserService_getUserByNickName_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_getUserByNickName_result.prototype = {};
UserService_getUserByNickName_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.User();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_getUserByNickName_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_getUserByNickName_result');
  if (this.success) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.setUser = function(user, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setUser(user);
};

UserServiceClient.prototype.send_setUser = function(user) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setUser', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_setUser_args();
  args.user = user;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_setUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_setUser_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
UserServiceClient.prototype.getUserByEmail = function(email, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserByEmail(email);
};

UserServiceClient.prototype.send_getUserByEmail = function(email) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByEmail', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_getUserByEmail_args();
  args.email = email;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByEmail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByEmail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByEmail failed: unknown result');
};
UserServiceClient.prototype.getUserByUid = function(uid, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserByUid(uid);
};

UserServiceClient.prototype.send_getUserByUid = function(uid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByUid', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_getUserByUid_args();
  args.uid = uid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByUid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByUid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByUid failed: unknown result');
};
UserServiceClient.prototype.getUserByNickName = function(nickName, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_getUserByNickName(nickName);
};

UserServiceClient.prototype.send_getUserByNickName = function(nickName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUserByNickName', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_getUserByNickName_args();
  args.nickName = nickName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

UserServiceClient.prototype.recv_getUserByNickName = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new UserService_getUserByNickName_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUserByNickName failed: unknown result');
};
var UserServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
UserServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

UserServiceProcessor.prototype.process_setUser = function(seqid, input, output) {
  var args = new UserService_setUser_args();
  args.read(input);
  input.readMessageEnd();
  var result = new UserService_setUser_result();
  this._handler.setUser(args.user, function (success) {
    result.success = success;
    output.writeMessageBegin("setUser", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserServiceProcessor.prototype.process_getUserByEmail = function(seqid, input, output) {
  var args = new UserService_getUserByEmail_args();
  args.read(input);
  input.readMessageEnd();
  var result = new UserService_getUserByEmail_result();
  this._handler.getUserByEmail(args.email, function (success) {
    result.success = success;
    output.writeMessageBegin("getUserByEmail", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserServiceProcessor.prototype.process_getUserByUid = function(seqid, input, output) {
  var args = new UserService_getUserByUid_args();
  args.read(input);
  input.readMessageEnd();
  var result = new UserService_getUserByUid_result();
  this._handler.getUserByUid(args.uid, function (success) {
    result.success = success;
    output.writeMessageBegin("getUserByUid", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

UserServiceProcessor.prototype.process_getUserByNickName = function(seqid, input, output) {
  var args = new UserService_getUserByNickName_args();
  args.read(input);
  input.readMessageEnd();
  var result = new UserService_getUserByNickName_result();
  this._handler.getUserByNickName(args.nickName, function (success) {
    result.success = success;
    output.writeMessageBegin("getUserByNickName", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

